// Jenkinsfile for ParksMap
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def mvnCmd = "mvn -s ./nexus_settings.xml"
    stage('Checkout Source') {
    git url: 'https://github.com/nexus-Six/openshift-training-advanced-development-homework.git'
    }
    echo "Copying nexus_setting.xml"
    sh "cp nexus_settings.xml ParksMap/nexus_settings.xml"

    echo "Switching folder"
    dir ('ParksMap') {
      
      echo "Replacing GUID in nexus settings"
      sh "sed -i -- 's/GUID/${GUID}/g' nexus_settings.xml"

      echo "Defining tags"
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")
      def devTag  = "${version}-${BUILD_NUMBER}"
      def prodTag = "${version}"

    

      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests=true"
      }

      stage('Code Analysis') {
        echo "Running Code Analysis"

        sh "${mvnCmd} test"
    
        // Replace xyz-sonarqube with the name of your Sonarqube project
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      }

      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // Replace xyz-nexus with the name of your Nexus project
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }

      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // Start Binary Build in OpenShift using the file we just published
        // The filename is openshift-tasks.war in the 'target' directory of your current
        // Jenkins workspace
        // Replace xyz-tasks-dev with the name of your dev project
        echo "Content of target dir :"
        
        sh "ls -l ./target"

        sh "oc whoami" 

        sh "oc project ${GUID}-parks-dev"

        sh "oc start-build parksmap --follow --from-file=./target/parksmap.jar"
      
        // Tag the image using the devTag
        openshiftTag alias: 'false', destStream: 'parksmap', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
      }

      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // Update the Image on the Development Deployment Config
        sh "oc set image dc/parksmap parksmap=docker-registry.default.svc:5000/${GUID}-parks-dev/parksmap:${devTag} -n ${GUID}-parks-dev"
        
        // Deploy the development application.
        // Replace xyz-tasks-dev with the name of your production project
        openshiftDeploy depCfg: 'parksmap', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '15', waitUnit: 'min'
        openshiftVerifyDeployment depCfg: 'parksmap', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'parksmap', verbose: 'false'
      }


    
      stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"

        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/parksmap:${devTag} docker://nexus3-registry.${GUID}-nexus.svc.cluster.local:5000/parksmap:${devTag}"

        // Tag the built image with the production tag.
        // Replace xyz-tasks-dev with the name of your dev project
        openshiftTag alias: 'false', destStream: 'parksmap', destTag: prodTag, destinationNamespace: '${GUID}-parks-prod', namespace: '${GUID}-parks-dev', srcStream: 'parksmap', srcTag: devTag, verbose: 'false'
      }

      stage('Blue/Green Production Deployment') {
        // Replace xyz-tasks-dev and xyz-tasks-prod with
        // your project names
        activeApp = sh(returnStdout: true, script: "oc get route parksmap -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
        if (activeApp == "parksmap-green") {
          destApp = "parksmap-blue"
        }
        else {
          destApp = "parksmap-green"
        }
        echo "Active Application:      " + activeApp
        echo "Destination Application: " + destApp

        // Update the Image on the Production Deployment Config
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-prod/parksmap:${prodTag} -n ${GUID}-parks-prod"

        // Deploy the inactive application.
        // Replace xyz-tasks-prod with the name of your production project
        //echo "Deploying parksmap Application: parksmap:${prodTag}"
        //openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
        //openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
        //openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
      }

      stage('Switch over to new Version') {
        // input "Switch Production?"

        echo "Testing current route"
        def parksMapRoute = sh(returnStdout: true, script: "curl parksmap-${GUID}-parks-prod.apps.${CLUSTER}/ws/appname/").trim()
        echo "Current ParksMap Route 1: " + parksMapRoute

        sh "oc rollout latest dc/${destApp} -n $GUID-parks-prod"

        sh "oc rollout status dc/${destApp} --watch -n $GUID-parks-prod"

        echo "Switching Production application from ${activeApp} to ${destApp}."
        // Replace xyz-tasks-prod with the name of your production project
        sh 'oc patch route parksmap -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
        
        echo "Verifying switch"
        parksMapRoute = sh(returnStdout: true, script: "curl parksmap-${GUID}-parks-prod.apps.${CLUSTER}/ws/appname/").trim()
        echo "Current ParksMap Route 2: " + parksMapRoute

      }

    }

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
